"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import {
  FileText,
  Upload,
  Loader2,
  AlertCircle,
  CheckCircle,
  Download,
  Eye,
  FileCheck,
} from "lucide-react";
import { GoogleGenerativeAI } from "@google/generative-ai";

interface AnalysisReport {
  documentType: string;
  keyFindings: string[];
  diagnosis: string;
  medications: string[];
  recommendations: string[];
  riskLevel: "low" | "medium" | "high";
  summary: string;
}

export default function DocumentAnalysis() {
  const [document, setDocument] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [report, setReport] = useState<AnalysisReport | null>(null);

  const handleDocumentChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];

      // Validate file type
      const validTypes = ["application/pdf", "image/jpeg", "image/png", "image/jpg"];
      if (!validTypes.includes(file.type)) {
        setError("Please upload a PDF or image file (JPG, PNG)");
        return;
      }

      // Validate file size (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        setError("File size should not exceed 10MB");
        return;
      }

      setDocument(file);
      setError(null);
      setReport(null);
    }
  };

  const analyzeDocument = async () => {
    if (!document) {
      setError("Please upload a document first");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      // Initialize Gemini AI
      const genAI = new GoogleGenerativeAI(
        process.env.NEXT_PUBLIC_GEMINI_API_KEY || ""
      );
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });

      // Convert file to base64 for Gemini
      const base64Data = await fileToBase64(document);
      const imagePart = {
        inlineData: {
          data: base64Data,
          mimeType: document.type,
        },
      };

      const prompt = `You are a medical document analysis AI. Analyze this medical document thoroughly and provide a structured JSON response with the following fields:

{
  "documentType": "Type of medical document (e.g., Lab Report, X-Ray, MRI, Prescription, etc.)",
  "keyFindings": ["Array of key findings from the document"],
  "diagnosis": "Main diagnosis or condition identified",
  "medications": ["List of medications mentioned, if any"],
  "recommendations": ["Medical recommendations based on the document"],
  "riskLevel": "low, medium, or high based on the findings",
  "summary": "A brief summary of the document (2-3 sentences)"
}

Please analyze the medical document and provide accurate, professional medical insights. If this is not a medical document, indicate that in the documentType field.`;

      const result = await model.generateContent([prompt, imagePart]);
      const responseText = result.response.text();

      // Extract JSON from response
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error("Failed to parse AI response");
      }

      const analysisReport: AnalysisReport = JSON.parse(jsonMatch[0]);
      setReport(analysisReport);

      // Store report in sessionStorage
      sessionStorage.setItem("documentAnalysisReport", JSON.stringify(analysisReport));
    } catch (err: any) {
      console.error("Analysis error:", err);
      setError(err.message || "Failed to analyze document. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const base64 = (reader.result as string).split(",")[1];
        resolve(base64);
      };
      reader.onerror = (error) => reject(error);
    });
  };

  const downloadReport = () => {
    if (!report) return;

    const reportText = `
MEDICAL DOCUMENT ANALYSIS REPORT
================================

Document Type: ${report.documentType}
Risk Level: ${report.riskLevel.toUpperCase()}

SUMMARY
-------
${report.summary}

DIAGNOSIS
---------
${report.diagnosis}

KEY FINDINGS
------------
${report.keyFindings.map((finding, i) => `${i + 1}. ${finding}`).join("\n")}

MEDICATIONS
-----------
${report.medications.length > 0 ? report.medications.map((med, i) => `${i + 1}. ${med}`).join("\n") : "None mentioned"}

RECOMMENDATIONS
---------------
${report.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join("\n")}

---
Generated by Sanjeevani AI Medical Analysis
Date: ${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([reportText], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `medical-analysis-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-background/80 p-4 py-20">
      <div className="container mx-auto max-w-5xl">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <div className="w-16 h-16 rounded-full bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center shadow-lg">
              <FileText className="w-10 h-10 text-white" />
            </div>
          </div>
          <h1 className="text-4xl font-bold mb-2">Medical Document Analysis</h1>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            Upload your medical documents (lab reports, prescriptions, X-rays, etc.) and get instant AI-powered analysis
          </p>
        </div>

        {/* Upload Section */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>Upload Medical Document</CardTitle>
            <CardDescription>
              Supported formats: PDF, JPG, PNG (Max size: 10MB)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {/* File Upload */}
              <div className="border-2 border-dashed rounded-lg p-8 text-center hover:border-primary transition-colors">
                <input
                  id="document"
                  type="file"
                  accept=".pdf,image/jpeg,image/png,image/jpg"
                  onChange={handleDocumentChange}
                  className="hidden"
                />
                <label htmlFor="document" className="cursor-pointer">
                  {document ? (
                    <div className="flex flex-col items-center gap-3">
                      <div className="w-16 h-16 rounded-full bg-green-500/10 flex items-center justify-center">
                        <CheckCircle className="w-8 h-8 text-green-500" />
                      </div>
                      <div>
                        <p className="font-semibold text-lg">{document.name}</p>
                        <p className="text-sm text-muted-foreground">
                          {(document.size / 1024 / 1024).toFixed(2)} MB
                        </p>
                      </div>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={(e) => {
                          e.preventDefault();
                          setDocument(null);
                          setReport(null);
                        }}
                      >
                        Remove
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      <Upload className="w-12 h-12 mx-auto text-muted-foreground" />
                      <div>
                        <p className="text-lg font-semibold">
                          Click to upload medical document
                        </p>
                        <p className="text-sm text-muted-foreground mt-1">
                          Lab reports, prescriptions, X-rays, MRI scans, etc.
                        </p>
                      </div>
                    </div>
                  )}
                </label>
              </div>

              {/* Error Message */}
              {error && (
                <div className="flex items-start gap-2 p-4 rounded-md bg-destructive/10 text-destructive">
                  <AlertCircle className="h-5 w-5 mt-0.5 flex-shrink-0" />
                  <div>
                    <p className="font-semibold">Error</p>
                    <p className="text-sm">{error}</p>
                  </div>
                </div>
              )}

              {/* Analyze Button */}
              <Button
                onClick={analyzeDocument}
                disabled={!document || loading}
                className="w-full h-12 text-lg"
              >
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                    Analyzing Document...
                  </>
                ) : (
                  <>
                    <FileCheck className="mr-2 h-5 w-5" />
                    Analyze Document
                  </>
                )}
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Analysis Report */}
        {report && (
          <Card className="border-2 border-blue-500/50">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Analysis Report</CardTitle>
                  <CardDescription>AI-generated medical document analysis</CardDescription>
                </div>
                <Button onClick={downloadReport} variant="outline">
                  <Download className="mr-2 h-4 w-4" />
                  Download Report
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Document Type & Risk Level */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="bg-blue-500/10 border border-blue-500/50 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-1">
                      <FileText className="w-4 h-4 text-blue-500" />
                      <span className="text-sm font-medium text-muted-foreground">
                        Document Type
                      </span>
                    </div>
                    <p className="text-lg font-semibold">{report.documentType}</p>
                  </div>
                  <div
                    className={`border rounded-lg p-4 ${
                      report.riskLevel === "high"
                        ? "bg-red-500/10 border-red-500/50"
                        : report.riskLevel === "medium"
                        ? "bg-orange-500/10 border-orange-500/50"
                        : "bg-green-500/10 border-green-500/50"
                    }`}
                  >
                    <div className="flex items-center gap-2 mb-1">
                      <AlertCircle
                        className={`w-4 h-4 ${
                          report.riskLevel === "high"
                            ? "text-red-500"
                            : report.riskLevel === "medium"
                            ? "text-orange-500"
                            : "text-green-500"
                        }`}
                      />
                      <span className="text-sm font-medium text-muted-foreground">
                        Risk Level
                      </span>
                    </div>
                    <p className="text-lg font-semibold capitalize">{report.riskLevel}</p>
                  </div>
                </div>

                {/* Summary */}
                <div className="bg-muted/50 border rounded-lg p-4">
                  <h3 className="font-semibold mb-2 flex items-center gap-2">
                    <Eye className="w-4 h-4" />
                    Summary
                  </h3>
                  <p className="text-muted-foreground">{report.summary}</p>
                </div>

                {/* Diagnosis */}
                <div className="border-l-4 border-blue-500 pl-4">
                  <h3 className="font-semibold mb-2">Diagnosis</h3>
                  <p className="text-muted-foreground">{report.diagnosis}</p>
                </div>

                {/* Key Findings */}
                <div>
                  <h3 className="font-semibold mb-3">Key Findings</h3>
                  <ul className="space-y-2">
                    {report.keyFindings.map((finding, index) => (
                      <li
                        key={index}
                        className="flex items-start gap-2 bg-muted/50 p-3 rounded-lg"
                      >
                        <CheckCircle className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" />
                        <span>{finding}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                {/* Medications */}
                {report.medications.length > 0 && (
                  <div>
                    <h3 className="font-semibold mb-3">Medications</h3>
                    <div className="grid md:grid-cols-2 gap-2">
                      {report.medications.map((med, index) => (
                        <div
                          key={index}
                          className="bg-purple-500/10 border border-purple-500/50 rounded-lg p-3"
                        >
                          <p className="text-sm">{med}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Recommendations */}
                <div>
                  <h3 className="font-semibold mb-3">Recommendations</h3>
                  <ul className="space-y-2">
                    {report.recommendations.map((rec, index) => (
                      <li
                        key={index}
                        className="flex items-start gap-2 bg-blue-500/10 p-3 rounded-lg"
                      >
                        <span className="text-blue-500 font-bold mt-0.5">
                          {index + 1}.
                        </span>
                        <span>{rec}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                {/* Disclaimer */}
                <div className="bg-yellow-500/10 border border-yellow-500/50 rounded-lg p-4">
                  <p className="text-sm text-muted-foreground">
                    <strong className="text-yellow-700 dark:text-yellow-500">
                      Medical Disclaimer:
                    </strong>{" "}
                    This analysis is generated by AI and should not replace professional
                    medical advice. Always consult with a qualified healthcare provider
                    for medical decisions.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Info Box */}
        <div className="mt-6 bg-blue-500/10 border border-blue-500/50 rounded-lg p-4">
          <div className="flex items-start gap-3">
            <FileText className="w-5 h-5 text-blue-500 mt-0.5" />
            <div className="text-sm">
              <p className="font-semibold text-blue-600 dark:text-blue-400 mb-1">
                How It Works
              </p>
              <p className="text-muted-foreground">
                Our AI analyzes your medical documents using advanced computer vision and
                natural language processing. It extracts key information, identifies
                diagnoses, medications, and provides actionable recommendations based on
                the document content.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
